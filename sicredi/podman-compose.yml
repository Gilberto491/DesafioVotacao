version: "3.8"

services:
  db:
    image: docker.io/library/postgres:16
    container_name: pg-sicredi
    environment:
      POSTGRES_DB: votacao
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: ["postgres",
      "-c","max_connections=50",
      "-c","shared_buffers=128MB",
      "-c","effective_cache_size=512MB",
      "-c","work_mem=8MB",
      "-c","maintenance_work_mem=64MB",
      "-c","wal_buffers=4MB",
      "-c","checkpoint_completion_target=0.9",
      "-c","max_wal_size=512MB",
      "-c","min_wal_size=64MB",
      "-c","synchronous_commit=off"
    ]
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d votacao"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  sicredi-api:
    image: docker.io/juniorfredes/sicredi-api:0.1.1-alpine
    container_name: api-sicredi
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/votacao
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      JAVA_TOOL_OPTIONS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,prometheus"
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      SERVER_PORT: "8080"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
      interval: 15s
      timeout: 5s
      retries: 12
    restart: always

  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=3d"
      - "--storage.tsdb.retention.size=512MB"
      - "--storage.tsdb.wal-compression"
      - "--query.max-concurrency=2"
      - "--web.enable-lifecycle"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - promdata:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - sicredi-api
    restart: always

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_LOG_MODE: console
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always

volumes:
  pgdata:
  promdata:
  grafana-data:
